<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

  <parent>
	<groupId>org.docx4j</groupId>
	<artifactId>docx4j-parent</artifactId>
	<version>${revision}</version>
  </parent>
  
	<artifactId>docx4j-core</artifactId>
	<packaging>jar</packaging>
	<name>docx4j-core</name>
	
	<description>
		docx4j is a library which helps you to work with the Office Open
		XML file format as used in docx
		documents, pptx presentations, and xlsx spreadsheets.
	</description>

	
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<outputDirectory>bin</outputDirectory><!--  for a clean jar, be sure to avoid mixing mvn and eclipse output -->
		<testOutputDirectory>bin-testOutput</testOutputDirectory>
			<!-- NB this confuses Eclipse, in that if you modify test src, it doesn't recompile it to this dir. 
			     You need to run mvn test from the command line to recompile, then Eclipse can run 
			     the new code.  -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- The Surefire Plugin is used during the test phase of the build lifecycle
					to execute the unit tests of an application -->
				<version>2.6</version>
				<configuration>
					<excludes>
						<exclude>**/samples/*.java</exclude>
						<exclude>**/AbstractNumberingTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<excludes>
						<!--  the below are prob not necessary, now that we are building from bin-mvn, and so avoiding stuff Eclipse puts into bin dir -->
						<exclude>**/*.docx</exclude><!-- docx files in /src/test/resources add unwanted 1 MB to jar. -->
						<exclude>src/test/resources/**/*</exclude>
						<exclude>src/main/resources/README.txt</exclude><!--  sample log4j.xml and docx4j.properties are now in src/samples/_resources-->
					</excludes>
				</configuration>
			</plugin>
 			
		</plugins>
        
		<resources>
			<!-- be sure to get xml,xlst resources in various src trees -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<!-- 
			<resource>
				<directory>src/main/java/org/docx4j/org/apache/xml/serializer</directory>
				<includes>
					<include>*.properties</include>
				</includes>
			</resource>
			 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/test/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>	
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<!-- <resource> <directory>src/test/resources</directory> <excludes> <exclude>*.docx</exclude>
				</excludes> </resource> -->
		</resources>
	</build>
	
	
	<dependencies>

		<dependency>
            <groupId>org.docx4j</groupId>
            <artifactId>docx4j-openxml-objects</artifactId>
            <version>8.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
            <groupId>org.docx4j</groupId>
            <artifactId>docx4j-openxml-objects-pml</artifactId>
            <version>8.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
            <groupId>org.docx4j</groupId>
            <artifactId>docx4j-openxml-objects-sml</artifactId>
            <version>8.0.0-SNAPSHOT</version>
		</dependency>
        
		<dependency>
			<groupId>org.plutext</groupId>
			<artifactId>jaxb-svg11</artifactId><!-- previously part of docx4j source -->
			<version>1.0.2</version>
		</dependency>

	<!-- To use MOXy, uncomment the following 2 dependencies. 
		Dependency version 2.4.1 had some issues,
		see http://www.docx4java.org/forums/docx-java-f6/moxy-t1242.html for further
		details.  	
		
		org.eclipse.persistence.internal.oxm.XMLBinaryDataHelper.initializeDataTypes(XMLBinaryDataHelper.java:75)
		needs javax.mail
		
		v2.6+ org/eclipse/persistence is class file version 51.0  ie Java 7,
		so stick with 2.5.2 (since all our other deps still support Java 6)
 		<dependency>
			<groupId>org.docx4j</groupId>
			<artifactId>docx4j-MOXy-JAXBContext</artifactId>
			<version>6.0.0</version>
		</dependency> 

				<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.7</version>
		</dependency>
		
		-->
		
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.moxy</artifactId>
			<version>2.5.2</version>
		</dependency>
		
		
		<!--  events -->
		<dependency>
		    <groupId>net.engio</groupId>
		    <artifactId>mbassador</artifactId>
		    <version>1.3.2</version>
		</dependency>


		<!--  instead of FOP's commons-logging 		
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>jcl-over-slf4j</artifactId>
		    <version>1.7.25</version>
		</dependency>		
		 -->	

		<!--  .. default to log4j implementation, just like docx4j 2.8.1 and earlier.
                 UNLESS creating shaded jar for Android. 
		 <dependency>
		  <groupId>org.slf4j</groupId>
		  <artifactId>slf4j-log4j12</artifactId>
		  <version>1.7.25</version>
		</dependency>		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
				<exclusions>
					<exclusion>
						<groupId>javax.mail</groupId>
						<artifactId>mail</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.jms</groupId>
						<artifactId>jms</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jdmk</groupId>
						<artifactId>jmxtools</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jmx</groupId>
						<artifactId>jmxri</artifactId>
					</exclusion>
				</exclusions>
		</dependency>
 --> 
 		 
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.8.1</version>  <!-- ns prefix mapper uses org.apache.commons.lang3.text.StrTokenizer -->
		</dependency>

		<!--  3.4.0: used for zip/unzip -->		 
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-compress</artifactId>
		    <version>1.18</version>
		</dependency>		 
		 
		 <!--  supports org.apache.commons.lang.NotImplementedException -->
		 <!-- 
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.4</version> 
		</dependency>
		 -->
		
		<dependency>
			<!--  required for ole introspection -->
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version> <!--  2.2 works -->
		</dependency>
		
		<!-- you can comment out if you don't want
			 to use Plutext's commercial PDF Converter.	
		 -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.6</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>        
            </exclusions>
        </dependency>
						
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.9.8</version>
		</dependency>
		
		<dependency>
		  <groupId>com.fasterxml.jackson.core</groupId>
		  <artifactId>jackson-databind</artifactId>
			<version>2.9.8</version>
		</dependency>		
		

	<dependency>
		<groupId>org.apache.xmlgraphics</groupId>
		<artifactId>xmlgraphics-commons</artifactId>
		<version>2.3</version>
		<exclusions>
			<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
			</exclusion>		
		</exclusions>
	</dependency>
		
	<dependency>
		<groupId>org.docx4j.org.apache</groupId>
		<artifactId>xalan-serializer</artifactId>
		<version>11.7.3-SNAPSHOT</version>
	</dependency>
	<dependency>
		<groupId>org.docx4j.org.apache</groupId>
		<artifactId>xalan-interpretive</artifactId>
		<version>11.7.3-SNAPSHOT</version>
	</dependency>
		
<!-- 	<dependency>
		<groupId>xalan</groupId>
		<artifactId>xalan</artifactId>
		<version>2.7.2</version>
		<exclusions>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
 -->
 
<!-- Saxon for XPath
<dependency>
  <groupId>net.sf.saxon</groupId>
  <artifactId>Saxon-HE</artifactId>
  <version>9.9.0-2</version>
</dependency>
-->

<dependency>
    <groupId>net.arnx</groupId>
    <artifactId>wmf2svg</artifactId>
    <version>0.9.8</version>
</dependency>


		<!-- Ensure both the Java 6 and RI interfaces are present,
		     even if the user has just one.
		     NB: this (or an added source location containing them) is
		     necessary (at least for Maven 2.2.1) since without this,
		     Maven doesn't find the Java 6 copy in rt.jar 
		<dependency>
		    <groupId>com.googlecode.jaxb-namespaceprefixmapper-interfaces</groupId>
		    <artifactId>JAXBNamespacePrefixMapper</artifactId>
		    <version>6.1.0</version>
   			<scope>provided</scope>
   		</dependency>
-->

		<dependency>
    		<groupId>org.antlr</groupId>
    		<artifactId>antlr-runtime</artifactId>
    		<version>3.5.2</version>
		</dependency>
		<dependency>
		    <groupId>org.antlr</groupId>
		    <artifactId>stringtemplate</artifactId>
		    <version>3.2.1</version>
		</dependency>
		
		<!--  since 3.1.1 -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		    <version>27.0.1-jre</version>
		</dependency>	
		
		<!--  for anon functionality; since 3.3.1 -->
		<dependency>
		    <groupId>com.thedeanda</groupId>
		    <artifactId>lorem</artifactId>
		    <version>2.1</version>
		</dependency>		
		
<!-- Uncomment for load/save via JCR, which
		may be found in docx4j-extras.
		<dependency>
			<groupId>javax.jcr</groupId>
			<artifactId>jcr</artifactId>
			<version>1.0</version>
		</dependency>
		-->


  		<!-- svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

			(stuff not available in public repositories)

			mvn deploy:deploy-file -f wagon-svn-pom.xml -Dfile=dist/docx4j.jar -DpomFile=pom.xml  -Dpackaging=jar -DrepositoryId=docx4j -Durl=svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

		-->
		

	</dependencies>
	
</project>
