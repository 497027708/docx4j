<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>
  
	<groupId>org.docx4j</groupId>
	<artifactId>docx4j-OSGi</artifactId>
	<version>6.1.3-SNAPSHOT</version>
	<packaging>bundle</packaging>
	<name>docx4j</name>
	
	<description>
		docx4j is a library which helps you to work with the Office Open
		XML file format as used in docx
		documents, pptx presentations, and xlsx spreadsheets.
	</description>
	<url>http://www.docx4java.org/</url>
	<licenses>
	  <license>
	    <name>Apache 2</name>
	    <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
	    <distribution>repo</distribution>
	    <comments>A business-friendly OSS license</comments>
	  </license>
  	</licenses>
	<scm>
	    <developerConnection>scm:git|git@github.com:plutext/docx4j.git</developerConnection>
    </scm>
	<inceptionYear>2007</inceptionYear>

	  <properties>
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- github server corresponds to entry in ~/.m2/settings.xml -->
    <github.global.server>github</github.global.server>
	  </properties>	
	  
	
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<outputDirectory>bin</outputDirectory><!--  for a clean jar, be sure to avoid mixing mvn and eclipse output -->
			<!-- 
			
		<testOutputDirectory>bin-testOutput</testOutputDirectory>
			
			
			NB this confuses Eclipse, in that if you modify test src, it doesn't recompile it to this dir. 
			     You need to run mvn test from the command line to recompile, then Eclipse can run 
			     the new code.  -->
		<plugins>

<!--  

mvn org.apache.felix:maven-bundle-plugin:bundle

Based on https://github.com/uncleit/docx4j-osgi/blob/master/pom.xml or https://github.com/kimios/kimios/blob/master/kimios-osgi-packages/kimios-docx4j-osgi/pom.xml  

[WARNING] Bundle org.docx4j:docx4j:jar:6.1.3-SNAPSHOT : Split package, multiple jars provide the 
same package:org/apache/xml/serializer
Use Import/Export Package directive -split-package:=(merge-first|merge-last|error|first) to get rid of this warning
Package found in   [Jar:., Jar:serializer]

[WARNING] Bundle org.docx4j:docx4j:jar:6.1.3-SNAPSHOT : Split package, multiple jars provide the 
same package:org/apache/avalon/framework/configuration
Use Import/Export Package directive -split-package:=(merge-first|merge-last|error|first) to get rid of this warning
Package found in   [Jar:avalon-framework-api, Jar:avalon-framework-impl]

-->		
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <!-- <version>2.5.3</version> -->
                <version>4.1.0</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                    	<Manifest-Version>2.0</Manifest-Version>
                        <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>
                        <Bundle-Name>${project.artifactId}</Bundle-Name>
                        <Bundle-Version>${project.version}</Bundle-Version>
                        <Embed-Dependency>
                            *;scope=compile|runtime;inline=false
                        </Embed-Dependency>
                        <Embed-Transitive>true</Embed-Transitive>
                        <Import-Package>
                            com.google.common.cache;version="[17.0,18)";resolution:=optional,
                            
                            com.topologi.diffx.event;resolution:=optional,
                            com.topologi.diffx.xml;resolution:=optional,
                            com.topologi.diffx.xml.esc;resolution:=optional,
                            net.engio.mbassy.bus,
                            net.engio.mbassy.bus.config,
                            org.antlr.runtime;resolution:=optional,
                            org.antlr.stringtemplate;resolution:=optional,
                            org.antlr.stringtemplate.language;resolution:=optional,
                            org.apache.avalon.framework.configuration;resolution:=optional,
                            org.apache.commons.codec.binary,
						    org.apache.commons.codec,
						    org.apache.commons.compress,
						    org.apache.commons.lang3,
						    org.apache.httpcomponents.httpclient,
						    org.apache.httpcomponents.httpcore,
    
                            org.apache.commons.io,
                            org.apache.commons.io.filefilter,
                            org.apache.commons.io.output,
                            org.apache.commons.lang;version="[2.4,3)",
                            org.apache.commons.lang.text;version="[2.4,3)",
                            org.apache.fop.apps;resolution:=optional,
                            org.apache.poi.hwpf;resolution:=optional,
                            org.apache.poi.hwpf.model;resolution:=optional,
                            org.apache.poi.hwpf.usermodel;resolution:=optional,
                            org.apache.poi.poifs.crypt;resolution:=optional,
                            org.apache.poi.poifs.dev;resolution:=optional,
                            org.apache.poi.poifs.filesystem;resolution:=optional,
                            org.apache.xmlgraphics.fonts;resolution:=optional,
                            org.apache.xmlgraphics.image.loader;resolution:=optional,
                            org.apache.xmlgraphics.image.loader.cache;resolution:=optional,
                            org.apache.xmlgraphics.image.loader.impl;resolution:=optional,
                            org.apache.xmlgraphics.java2d;resolution:=optional,

                            org.slf4j;version="[1.6,2)";resolution:=optional,
                            org.slf4j.impl;version="[1.6,2)";resolution:=optional,
                            
                            org.apache.xalan.processor;resolution:=optional,
                            
                            org.apache.xml.utils,
                            
                            javax.xml.stream,
                            javax.xml.stream.events,
                            javax.xml.stream.util,
                            javax.xml,
                            javax.xml.crypto,
                            javax.xml.datatype,
                            javax.xml.namespace,
                            javax.xml.parsers,
                            javax.xml.transform,
                            javax.xml.transform.dom,
                            javax.xml.transform.sax,
                            javax.xml.transform.stax,
                            javax.xml.transform.stream,
                            javax.xml.validation,
                            javax.xml.xpath,
                            javax.xml.bind,
                            javax.xml.bind.util,
                            javax.xml.bind.annotation,
                            javax.xml.bind.annotation.adapters,
                            javax.xml.bind.attachment,
                            javax.xml.bind.helpers,
                            org.w3c.dom,
                            org.w3c.dom.bootstrap,
                            org.w3c.dom.css,
                            org.w3c.dom.events,
                            org.w3c.dom.html,
                            org.w3c.dom.ls,
                            org.w3c.dom.ranges,
                            org.w3c.dom.stylesheets,
                            org.w3c.dom.traversal,
                            org.w3c.dom.views,
                            org.w3c.dom.xpath,
                            org.xml.sax,
                            org.xml.sax.ext,
                            org.xml.sax.helpers,
                            antlr,
                            antlr.*,
                            net.arnx.wmf2svg,
                            net.arnx.wmf2svg.gdi,
                            net.arnx.wmf2svg.gdi.svg,
                            net.arnx.wmf2svg.gdi.wmf,
                            net.arnx.wmf2svg.io,
                            net.arnx.wmf2svg.util,
                            com.thedeanda.lorem
                        </Import-Package>
                        <Export-Package>
                            com.topologi.diffx.xml,
                            com.topologi.diffx.xml.esc,
                            com.topologi.diffx.event,
						    org.eclipse.compare,
						    org.eclipse.compare.internal,
						    org.eclipse.compare.rangedifferencer,                            
                            net.engio.mbassy.bus,
                            org.apache.avalon.framework.configuration,
                            org.plutext.jaxb.*,
                            org.docx4j.*,
                            org.pptx4j.*,
                            org.xlsx4j.*,
                            org.glox4j.*,
						    org.merlin.io,
						    org.opendope.*,
                            org.jvnet.jaxb2_commons.ppp
                        </Export-Package>
                    </instructions>
                </configuration>
            </plugin>		
		
		
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.3</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/pptx4j/java</source>
								<source>src/xlsx4j/java</source>
								<source>src/glox4j/java</source>
								<source>src/diffx</source>
								<!-- <source>src/xslfo</source> -->
								<!-- <source>src/svg</source> -->
								<!--source>src/sun</source -->
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
 					<verbose>false</verbose>
					<!-- maxmemory>512m</maxmemory On Linux, use: MAVEN_OPTS="-Xmx512m" mvn install -->
					<!-- try to help maven to find package com.sun.xml.internal.bind.marshaller:
						<bootclasspath>${java.home}/lib/rt.jar</bootclasspath> but this doesn't help -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
	     <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-enforcer-plugin</artifactId>
	        <version>3.0.0-M2</version> 
	        <executions>
	          <execution>
	            <id>enforce-bytecode-version</id>
	            <goals>
	              <goal>enforce</goal>
	            </goals>
	            <configuration>
	              <rules>
	                <enforceBytecodeVersion>
	                  <maxJdkVersion>1.6</maxJdkVersion>
	                  <excludes>
	                    <exclude>org.mindrot:jbcrypt</exclude>
	                  </excludes>
	                </enforceBytecodeVersion>
	              </rules>
	              <fail>true</fail>
	            </configuration>
	          </execution>
	        </executions>
	        <dependencies>
	          <dependency>
	            <groupId>org.codehaus.mojo</groupId>
	            <artifactId>extra-enforcer-rules</artifactId>
	            <version>1.0-beta-9</version>
	          </dependency>
	        </dependencies>
	      </plugin>			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- The Surefire Plugin is used during the test phase of the build lifecycle
					to execute the unit tests of an application -->
				<version>2.6</version>
				<configuration>
					<excludes>
						<exclude>**/samples/*.java</exclude>
						<exclude>**/AbstractNumberingTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<excludes>
						<!--  the below are prob not necessary, now that we are building from bin-mvn, and so avoiding stuff Eclipse puts into bin dir -->
						<exclude>**/*.docx</exclude><!-- docx files in /src/test/resources add unwanted 1 MB to jar. -->
						<exclude>src/test/resources/**/*</exclude>
						<exclude>src/main/resources/README.txt</exclude><!--  sample log4j.xml and docx4j.properties are now in src/samples/_resources-->
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<!-- The Source Plugin creates a jar archive of the source files of the
					current project. -->
				<version>2.1.2</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- maven-javadoc-plugin seems to require large -Xmx so comment this
				out if your build is failing because you don't have enough. -->

<!-- 			
		<plugin>
            <groupId>org.basepom.maven</groupId>
            <artifactId>duplicate-finder-maven-plugin</artifactId>
            <version>1.2.0</version>
            <executions>
                <execution>
                    <id>default</id>
                    <phase>verify</phase>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <printEqualFiles>false</printEqualFiles>
                <failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>
                <failBuildInCaseOfEqualContentConflict>false</failBuildInCaseOfEqualContentConflict>
                <failBuildInCaseOfConflict>false</failBuildInCaseOfConflict>
                <checkCompileClasspath>true</checkCompileClasspath>
                <checkRuntimeClasspath>true</checkRuntimeClasspath>
                <checkTestClasspath>true</checkTestClasspath>
                <skip>false</skip>
                <quiet>false</quiet>
                <preferLocal>true</preferLocal>
                <useResultFile>true</useResultFile>
                <resultFileMinClasspathCount>2</resultFileMinClasspathCount>
                <resultFile>${project.build.directory}/duplicate-finder-result.xml</resultFile>
                
				<includeBootClasspath>true</includeBootClasspath>
                <bootClasspathProperty>sun.boot.class.path</bootClasspathProperty>                

            </configuration>
        </plugin>
 -->
 
 			<!--  mvn versions:display-dependency-updates -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<rulesUri>file:///${project.basedir}/rules.xml</rulesUri>
				</configuration>
			</plugin> 
			
		<!--  mvn package 
			<plugin> 
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<excludes>
									<exclude>junit:junit</exclude>
								</excludes>								
							</artifactSet>
			              <shadedArtifactAttached>true</shadedArtifactAttached>
			              <shadedClassifierName>shaded</shadedClassifierName>
                          <relocations>
                            <relocation>
                              <pattern>org.apache.http</pattern>
                              <shadedPattern>org.docx4j.apache.http</shadedPattern>
                            </relocation>
                            <relocation>
                              <pattern>org.apache.commons.logging</pattern>
                              <shadedPattern>org.docx4j.slf4j.apache.commons.logging</shadedPattern>
                            </relocation>
                          </relocations> 
			              <transformers>
			                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
			                  <mainClass>org.docx4j.samples.DisplayMainDocumentPartXml</mainClass>
			                </transformer>
			              </transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>	
		-->	 
		</plugins>
    	<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>build-helper-maven-plugin</artifactId>
										<versionRange>[1.3,2.0)</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<!-- be sure to get xml,xlst resources in various src trees -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<!-- 
			<resource>
				<directory>src/main/java/org/docx4j/org/apache/xml/serializer</directory>
				<includes>
					<include>*.properties</include>
				</includes>
			</resource>
			 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/pptx4j/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/xlsx4j/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/test/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>	
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<!-- <resource> <directory>src/test/resources</directory> <excludes> <exclude>*.docx</exclude>
				</excludes> </resource> -->
		</resources>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<reportSets>
					<reportSet>
						<id>standard-javadoc</id>
						<inherited>true</inherited>
						<configuration>
							<description>
								docx4j Open XML manipulation library
							</description>
							<docfilessubdirs>true</docfilessubdirs>
							<failOnError>false</failOnError>
							<locale>en_AU</locale>
							<name>Javadoc report</name>
							<quiet>true</quiet>
							<serialwarn>false</serialwarn>
							<show>private</show>
							<source>1.6</source>
							<stylesheet>maven</stylesheet>
							<version>true</version>
						</configuration>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
	
	
	<dependencies>

		<dependency>
			<groupId>org.plutext</groupId>
			<artifactId>jaxb-svg11</artifactId><!-- previously part of docx4j source -->
			<version>1.0.2</version>
		</dependency>

	<!-- MOXy not supported in this branch -->

		
		<!--  events -->
		<dependency>
		    <groupId>net.engio</groupId>
		    <artifactId>mbassador</artifactId>
		    <version>1.2.4</version>
		</dependency>

		<!--  From 3.0, docx4j uses slf4j --> 
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>

		<!--  instead of FOP's commons-logging -->		
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>jcl-over-slf4j</artifactId>
		    <version>1.7.25</version>
		</dependency>		

		<!--  .. default to log4j implementation, just like docx4j 2.8.1 and earlier.
                 UNLESS creating shaded jar for Android.  --> 
		 <dependency>
		  <groupId>org.slf4j</groupId>
		  <artifactId>slf4j-log4j12</artifactId>
		  <version>1.7.25</version>
		</dependency>		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
				<exclusions>
					<exclusion>
						<groupId>javax.mail</groupId>
						<artifactId>mail</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.jms</groupId>
						<artifactId>jms</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jdmk</groupId>
						<artifactId>jmxtools</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jmx</groupId>
						<artifactId>jmxri</artifactId>
					</exclusion>
				</exclusions>
		</dependency>

 		 
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.5</version>  <!-- ns prefix mapper uses org.apache.commons.lang3.text.StrTokenizer -->
		</dependency>

		<!--  3.4.0: used for zip/unzip -->		 
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-compress</artifactId>
		    <version>1.12</version>
		</dependency>		 
		 
		 <!--  supports org.apache.commons.lang.NotImplementedException -->
		 <!-- 
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.4</version> 
		</dependency>
		 -->
		
		<dependency>
			<!--  required for ole introspection -->
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.5</version> <!--  2.2 works -->
		</dependency>
		
		<!-- you can comment out if you don't want
			 to use Plutext's commercial PDF Converter.	
		 -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.6</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>        
            </exclusions>
        </dependency>
						
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.7.9</version>
		</dependency>
		
		<dependency>
		  <groupId>com.fasterxml.jackson.core</groupId>
		  <artifactId>jackson-databind</artifactId>
			<version>2.7.9</version> <!--  2.7.9.4 confuses karaf? -->
		</dependency>		
		

	<dependency>
		<groupId>org.apache.xmlgraphics</groupId>
		<artifactId>xmlgraphics-commons</artifactId>
		<version>2.3</version>
		<exclusions>
			<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
			</exclusion>		
		</exclusions>
	</dependency>
		


	<!-- these two are to correct issues in fop dependency -->
	<dependency>
		<groupId>org.apache.avalon.framework</groupId>
		<artifactId>avalon-framework-api</artifactId>
		<version>4.3.1</version>
	</dependency>
	<dependency>
		<groupId>org.apache.avalon.framework</groupId>
		<artifactId>avalon-framework-impl</artifactId>
		<version>4.3.1</version>
	</dependency>
	<dependency>
		<groupId>xalan</groupId>
		<artifactId>xalan</artifactId>
		<version>2.7.2</version>
		<exclusions>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

<!-- These work for basic marshalling/unmarshalling,
     but not with our XSLT extension functions.
<dependency>
    <groupId>net.sf.saxon</groupId>
    <artifactId>saxon</artifactId>
    <version>8.7</version>
</dependency>
<dependency>
    <groupId>net.sf.saxon</groupId>
    <artifactId>saxon-dom</artifactId>
    <version>8.7</version>
</dependency>
-->
<!-- Saxon for XPath
<dependency>
  <groupId>net.sf.saxon</groupId>
  <artifactId>Saxon-HE</artifactId>
  <version>9.9.0-1</version>
</dependency>
-->

<dependency>
    <groupId>net.arnx</groupId>
    <artifactId>wmf2svg</artifactId>
    <version>0.9.8</version>
</dependency>


		<!-- Ensure both the Java 6 and RI interfaces are present,
		     even if the user has just one.
		     NB: this (or an added source location containing them) is
		     necessary (at least for Maven 2.2.1) since without this,
		     Maven doesn't find the Java 6 copy in rt.jar -->
		<dependency>
		    <groupId>com.googlecode.jaxb-namespaceprefixmapper-interfaces</groupId>
		    <artifactId>JAXBNamespacePrefixMapper</artifactId>
		    <version>6.1.0</version>
   			<!-- http://dev.plutext.org/forums/docx-java-f6/dependency-management-improvements-t739.html -->
   			<scope>provided</scope>
   		</dependency>

		<dependency>
    		<groupId>org.antlr</groupId>
    		<artifactId>antlr-runtime</artifactId>
    		<version>3.5.2</version>
		</dependency>
		<dependency>
		    <groupId>org.antlr</groupId>
		    <artifactId>stringtemplate</artifactId>
		    <version>3.2.1</version>
		</dependency>
		
		<!--  since 3.1.1 -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		    <version>20.0</version>
		</dependency>	
		
		<!--  for anon functionality; since 3.3.1 -->
		<dependency>
		    <groupId>com.thedeanda</groupId>
		    <artifactId>lorem</artifactId>
		    <version>2.1</version>
		</dependency>		
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

<!-- Uncomment for load/save via JCR, which
		may be found in docx4j-extras.
		<dependency>
			<groupId>javax.jcr</groupId>
			<artifactId>jcr</artifactId>
			<version>1.0</version>
		</dependency>
		-->


  		<!-- svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

			(stuff not available in public repositories)

			mvn deploy:deploy-file -f wagon-svn-pom.xml -Dfile=dist/docx4j.jar -DpomFile=pom.xml  -Dpackaging=jar -DrepositoryId=docx4j -Durl=svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

		-->
		

	</dependencies>

<!-- 
<distributionManagement>
    <repository>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
</distributionManagement>
 -->

	<profiles> <!--  use -P eg mvn -Psign-artifacts  -->
		<profile>
			<id>sign-artifacts</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		

		<!-- Deploy a snapshot to GitHub  
		
			 See http://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github
			 
			 To do this:
			 0. uncomment distribution management above
			 1. comment out parent element (top of pom), since this is what makes deploy push to https://oss.sonatype.org
			 2. comment out maven-javadoc-plugin, since its not worth bothering with that large upload
			 3. execute 
			  
			       mvn clean deploy  -Pgithub-mvn-repo
		
		 -->		
		<profile>
			<id>github-mvn-repo</id>
			<build>
			
				<plugins>
				
				    <plugin>
				        <artifactId>maven-deploy-plugin</artifactId>
				        <version>2.8.1</version>
				        <configuration>
				            <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>
				        </configuration>
				    </plugin>
				
			        <plugin>
			            <groupId>com.github.github</groupId>
			            <artifactId>site-maven-plugin</artifactId>
			            <version>0.12</version>
			            <configuration>
			            	<server>github</server>
			            	<merge>true</merge>
			                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->
			                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->
			                <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->
			                <branch>refs/heads/mvn-repo</branch>                        <!-- remote branch name -->
			                <includes><include>**/*</include></includes>
			                <repositoryName>docx4j</repositoryName>      <!-- github repo name -->
			                <repositoryOwner>plutext</repositoryOwner>    <!-- github username  -->
			            </configuration>
			            <executions>
			              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
			              <execution>
			                <goals>
			                  <goal>site</goal>
			                </goals>
			                <phase>deploy</phase>
			              </execution>
			            </executions>
			        </plugin>			
				</plugins>
			</build>
		</profile>
		

   		<!--  comment this out, until the Windows path issues below are fixed in m2eclipse
   	<profile>
   		<id>jdk15</id>
   		<activation>
   			<jdk>1.5</jdk>
   		</activation>
   		<dependencies>
   			<dependency>
   				<groupId>javax.xml.bind</groupId>
   				<artifactId>jaxb-api</artifactId>
   				<version>2.1</version>
   			</dependency>

   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.1.3</version>
   			</dependency>
   		</dependencies>
   	</profile>
   	<profile>
   		<id>jdk16</id>
   		<activation>
   			<jdk>1.6</jdk>
   		</activation>
   		<dependencies>
   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.0</version>
   				<scope>system</scope>
                <systemPath>${env.JAVA_HOME}/jre/lib/rt.jar</systemPath>
   			</dependency>
   		</dependencies>
   	</profile>
   				-->

    <profile>
        <id>java-9</id>
        <activation>
            <jdk>9</jdk>
        </activation>
        <dependencies>
            <!-- see https://stackoverflow.com/a/50195961/1031689 -->
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>2.3.0</version>
            </dependency>
            <dependency>
                <groupId>javax.activation</groupId>
                <artifactId>activation</artifactId>
                <version>1.1.1</version>
            </dependency>
        </dependencies>
    </profile>                
    <profile>
        <id>java-10</id>
        <activation>
            <jdk>10</jdk>
        </activation>
        <dependencies>
            <!-- see https://stackoverflow.com/a/50195961/1031689 -->
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>2.3.0</version>
		        <!-- Current  https://github.com/eclipse-ee4j/jaxb-ri -->
		        <!--  <version>2.4.0-SNAPSHOT</version>  -->
            </dependency>
            <dependency>
                <groupId>javax.activation</groupId>
                <artifactId>activation</artifactId>
                <version>1.1.1</version>
            </dependency>
        </dependencies>
    </profile>                



   </profiles>

   				<!--
                <systemPath>
                    /usr/lib/jvm/java-6-sun/jre/lib/rt.jar
                </systemPath>
   					Note for Windows users: Maven won't find rt.jar if systemPath
   					contains a space (eg "Program Files"). Either copy rt.jar
   					to a path that doesn't contain spaces, or use:

   					    <systemPath>${env.JAVA_HOME}/jre/lib/rt.jar</systemPath>

   					which works on the command line, but not in m2eclipse 0.9.x.
   					See http://jira.codehaus.org/browse/MNGECLIPSE-581

   					<systemPath>${java.home}/lib/rt.jar</systemPath>
   					broken (mvn 2.0.9) even though java.home is supposed to point to JRE_HOME:

   				-->
   				
<!-- Uncomment to deploy to GitHub.  MUST Comment out for real release
<distributionManagement>
    <repository>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
</distributionManagement>   				
-->
</project>
